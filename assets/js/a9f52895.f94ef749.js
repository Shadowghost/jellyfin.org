(self.webpackChunkjellyfin_org=self.webpackChunkjellyfin_org||[]).push([[9929],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return u},kt:function(){return d}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=r.createContext({}),c=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=c(e.components);return r.createElement(l.Provider,{value:n},e.children)},f={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(t),d=o,m=p["".concat(l,".").concat(d)]||p[d]||f[d]||a;return t?r.createElement(m,i(i({ref:n},u),{},{components:t})):r.createElement(m,i({ref:n},u))}));function d(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=p;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var c=2;c<a;c++)i[c]=t[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},228:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return i},contentTitle:function(){return s},metadata:function(){return l},toc:function(){return c},default:function(){return f}});var r=t(2122),o=t(9756),a=(t(7294),t(3905)),i={id:"network-reverse-proxy-traefik",title:"Traefik v1.x"},s=void 0,l={unversionedId:"reverse-proxy/network-reverse-proxy-traefik",id:"reverse-proxy/network-reverse-proxy-traefik",isDocsHomePage:!1,title:"Traefik v1.x",description:"Traefik v1.x",source:"@site/docs/reverse-proxy/traefik.md",sourceDirName:"reverse-proxy",slug:"/reverse-proxy/network-reverse-proxy-traefik",permalink:"/docs/reverse-proxy/network-reverse-proxy-traefik",editUrl:"https://github.com/jellyfin/jellyfin.org/edit/master/docs/reverse-proxy/traefik.md",version:"current",frontMatter:{id:"network-reverse-proxy-traefik",title:"Traefik v1.x"},sidebar:"tutorialSidebar",previous:{title:"Nginx",permalink:"/docs/reverse-proxy/network-reverse-proxy-nginx"},next:{title:"Traefik v2.x",permalink:"/docs/reverse-proxy/network-reverse-proxy-traefik2"}},c=[{value:"Traefik v1.x",id:"traefik-v1x",children:[{value:"docker-compose.yml",id:"docker-composeyml",children:[]},{value:"traefik.toml",id:"traefiktoml",children:[]}]}],u={toc:c};function f(e){var n=e.components,t=(0,o.Z)(e,["components"]);return(0,a.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"traefik-v1x"},"Traefik v1.x"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://traefik.io/"},"Traefik")," is a modern HTTP reverse proxy and load balancer that makes deploying microservices easy. Traefik integrates with your existing infrastructure components (Docker, Swarm mode, Kubernetes, Marathon, Consul, Etcd, Rancher, Amazon ECS, ...) and configures itself automatically and dynamically. Pointing Traefik at your orchestrator should be the only configuration step you need. This configuration is A+. Test your setup here at ",(0,a.kt)("a",{parentName:"p",href:"https://www.ssllabs.com/ssltest/"},"SSLlabs"),"."),(0,a.kt)("p",null,"Create docker-compose.yml, traefik.toml and acme.json in the ",(0,a.kt)("strong",{parentName:"p"},"same")," directory or change their paths in the volume section."),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"[!NOTE]","\nEnsure you enable Basic Auth protection for Traefik or disable its Dashboard. Otherwise your Dashboard will be accessible from the internet.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"sudo apt install apache2-utils\necho $(htpasswd -nb username mystrongpassword) | sed -e s/\\\\$/\\\\$\\\\$/g\n")),(0,a.kt)("p",null,"This command automatically escapes all $ inside the password for the YML file. If using an environment file, it does not need the $ escaped since it will not be interpreted by the shell."),(0,a.kt)("p",null,"Create the docker network for traefik."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"sudo docker network create traefik\n")),(0,a.kt)("h3",{id:"docker-composeyml"},"docker-compose.yml"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yml"},'version: \'3.5\'\nnetworks:\n  traefik:\n    name: traefik\nservices:\n  traefik:\n    container_name: traefik\n    image: traefik:v1.7\n    networks:\n      - traefik\n    ports:\n      - 80:80\n      - 443:443\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n      - ./traefik.toml:/traefik.toml\n      - ./acme.json:/acme.json\n    labels:\n      traefik.enable: "true"\n      traefik.backend: traefik\n      traefik.docker.network: traefik\n      traefik.port: 8080\n      traefik.frontend.rule: Host:traefik.example.com,\n      traefik.frontend.entryPoints: https\n      traefik.frontend.passHostHeader: "true"\n      traefik.frontend.headers.SSLForceHost: "true"\n      traefik.frontend.headers.SSLHost: traefik.example.com\n      traefik.frontend.headers.SSLRedirect: "true"\n      traefik.frontend.headers.browserXSSFilter: "true"\n      traefik.frontend.headers.contentTypeNosniff: "true"\n      traefik.frontend.headers.forceSTSHeader: "true"\n      traefik.frontend.headers.STSSeconds: 315360000\n      traefik.frontend.headers.STSIncludeSubdomains: "true"\n      traefik.frontend.headers.STSPreload: "true"\n      traefik.frontend.headers.customResponseHeaders: X-Robots-Tag:noindex,nofollow,nosnippet,noarchive,notranslate,noimageindex\n      traefik.frontend.headers.frameDeny: "true"\n      traefik.frontend.headers.customFrameOptionsValue: \'allow-from https://example.com\'\n#     traefik.frontend.auth.basic.users: xxx:xxx\n    restart: unless-stopped\n\n  jellyfin:\n    image: jellyfin/jellyfin\n    container_name: jellyfin\n    network_mode: "host"\n    volumes:\n      - /path/to/config:/config\n      - /path/to/cache:/cache\n      - /path/to/media:/media\n    restart: unless-stopped\n')),(0,a.kt)("p",null,"This TOML file can't support environment variables, so don't attempt to use variables."),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"[!WARNING]","\nDue to a ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/containous/traefik/issues/5559"},"bug")," in Traefik, you cannot dynamically route to containers when network_mode=host, so we have created a static route to the docker host (172.17.0.1:8096) in ",(0,a.kt)("inlineCode",{parentName:"p"},"traefik.toml"),". Using host networking (or macvlan) is required to use DLNA or an HdHomeRun as it supports multicast networking.")),(0,a.kt)("h3",{id:"traefiktoml"},"traefik.toml"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-toml"},'logLevel = "WARN"\ndefaultEntryPoints = ["http", "https"]\n\n[entryPoints]\n  [entryPoints.http]\n  address = ":80"\n    [entryPoints.http.redirect]\n    entryPoint = "https"\n  [entryPoints.https]\n  address = ":443"\n    [entryPoints.https.tls]\n    minVersion = "VersionTLS12"\n    cipherSuites = [\n      "TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384",\n      "TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384",\n      "TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305",\n      "TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305",\n      "TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256",\n      "TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256",\n      "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256",\n      "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256"\n    ]\n\n[retry]\n\n[api]\n\n[acme]\nacmeLogging = true\nemail = "user@example.com"\nstorage = "acme.json"\nentryPoint = "https"\n  [acme.dnsChallenge]\n    provider = "provider"\n    delayBeforeCheck = "60"\n\n[[acme.domains]]\n  main = "*.example.com"\n\n[docker]\ndomain = "example.com"\nnetwork = "traefik"\nexposedbydefault = false\n\n[file]\n[backends]\n  [backends.backend-jellyfin]\n    [backends.backend-jellyfin.servers]\n      [backends.backend-jellyfin.servers.server-1]\n        url = "http://172.17.0.1:8096"\n[frontends]\n  [frontends.jellyfin]\n    backend = "backend-jellyfin"\n    passHostHeader = true\n    [frontends.jellyfin.routes]\n      [frontends.jellyfin.routes.route-jellyfin-ext]\n        rule = "Host:jellyfin.example.com"\n    [frontends.jellyfin.headers]\n      SSLRedirect = true\n      SSLHost = "jellyfin.example.com"\n      SSLForceHost = true\n      STSSeconds = 315360000\n      STSIncludeSubdomains = true\n      STSPreload = true\n      forceSTSHeader = true\n      frameDeny = true\n      contentTypeNosniff = true\n      browserXSSFilter = true\n      customResponseHeaders = "X-Robots-Tag:noindex,nofollow,nosnippet,noarchive,notranslate,noimageindex"\n      customFrameOptionsValue = "allow-from https://example.com"\n')),(0,a.kt)("p",null,"Finally, create an empty acme.json file to handle the certificate."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"touch acme.json\nchmod 600 acme.json\n")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"[!WARNING]","\nChange example.com to your domain name and update the acme.json file with your email address. Let's Encrypt does not require a valid email but example.com will be flagged as fake.")),(0,a.kt)("p",null,"Launch the Traefik and Jellyfin services."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"docker-compose up -d\n")),(0,a.kt)("p",null,"Congratulations, your stack with Traefik and Jellyfin is running!"),(0,a.kt)("p",null,"Go to the domain you used earlier in the config file and your Jellyfin server will be running with HTTPS (AES 256) enabled."))}f.isMDXComponent=!0}}]);