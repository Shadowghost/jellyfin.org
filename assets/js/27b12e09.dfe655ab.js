"use strict";(self.webpackChunkjellyfin_org=self.webpackChunkjellyfin_org||[]).push([[71],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return c}});var a=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,i=e.originalType,s=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),u=p(n),c=l,k=u["".concat(s,".").concat(c)]||u[c]||m[c]||i;return n?a.createElement(k,r(r({ref:t},d),{},{components:n})):a.createElement(k,r({ref:t},d))}));function c(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var i=n.length,r=new Array(i);r[0]=u;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:l,r[1]=o;for(var p=2;p<i;p++)r[p]=n[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},2657:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return s},default:function(){return c},frontMatter:function(){return o},metadata:function(){return p},toc:function(){return m}});var a=n(3117),l=n(102),i=(n(7294),n(3905)),r=["components"],o={id:"installing-jellyfin",title:"Installing the server",sidebar_position:2},s=void 0,p={unversionedId:"installing-jellyfin",id:"installing-jellyfin",title:"Installing the server",description:"The Jellyfin project and its contributors offer a number of pre-built binary packages to assist in getting Jellyfin up and running quickly on multiple systems.",source:"@site/docs/installing.md",sourceDirName:".",slug:"/installing-jellyfin",permalink:"/docs/installing-jellyfin",draft:!1,editUrl:"https://github.com/jellyfin/jellyfin.org/edit/master/docs/installing.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{id:"installing-jellyfin",title:"Installing the server",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Getting started",permalink:"/docs/getting-started"},next:{title:"Building from source",permalink:"/docs/admin-building"}},d={},m=[{value:"Container images",id:"container-images",level:2},{value:"Docker",id:"docker",level:3},{value:"Unraid Docker",id:"unraid-docker",level:3},{value:"Kubernetes",id:"kubernetes",level:3},{value:"Podman",id:"podman",level:3},{value:"Managing via Systemd",id:"managing-via-systemd",level:4},{value:"Cloudron",id:"cloudron",level:3},{value:"Windows (x86/x64)",id:"windows-x86x64",level:2},{value:"Install using Installer (x64)",id:"install-using-installer-x64",level:3},{value:"Manual Installation (x86/x64)",id:"manual-installation-x86x64",level:3},{value:"MacOS",id:"macos",level:2},{value:"Linux",id:"linux",level:2},{value:"Linux (generic amd64)",id:"linux-generic-amd64",level:3},{value:"Installation Process",id:"installation-process",level:4},{value:"Portable DLL",id:"portable-dll",level:3},{value:"Arch Linux",id:"arch-linux",level:3},{value:"Fedora",id:"fedora",level:3},{value:"CentOS",id:"centos",level:3},{value:"Debian",id:"debian",level:3},{value:"Repository",id:"repository",level:4},{value:"Packages",id:"packages",level:4},{value:"Ubuntu",id:"ubuntu",level:3},{value:"Migrating to the new repository",id:"migrating-to-the-new-repository",level:4},{value:"Ubuntu Repository",id:"ubuntu-repository",level:4},{value:"Ubuntu Packages",id:"ubuntu-packages",level:4},{value:"Migrating native Debuntu install to docker",id:"migrating-native-debuntu-install-to-docker",level:4},{value:"Synology",id:"synology",level:2}],u={toc:m};function c(e){var t=e.components,o=(0,l.Z)(e,r);return(0,i.kt)("wrapper",(0,a.Z)({},u,o,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"The Jellyfin project and its contributors offer a number of pre-built binary packages to assist in getting Jellyfin up and running quickly on multiple systems."),(0,i.kt)("h2",{id:"container-images"},"Container images"),(0,i.kt)("p",null,"Official container image: ",(0,i.kt)("inlineCode",{parentName:"p"},"jellyfin/jellyfin")," ",(0,i.kt)("a",{href:"https://hub.docker.com/r/jellyfin/jellyfin"},(0,i.kt)("img",{alt:"Docker Pull Count",src:"https://img.shields.io/docker/pulls/jellyfin/jellyfin.svg"})),"."),(0,i.kt)("p",null,"LinuxServer.io image: ",(0,i.kt)("inlineCode",{parentName:"p"},"linuxserver/jellyfin")," ",(0,i.kt)("a",{href:"https://hub.docker.com/r/linuxserver/jellyfin"},(0,i.kt)("img",{alt:"Docker Pull Count",src:"https://img.shields.io/docker/pulls/linuxserver/jellyfin.svg"})),"."),(0,i.kt)("p",null,"hotio image: ",(0,i.kt)("inlineCode",{parentName:"p"},"hotio/jellyfin")," ",(0,i.kt)("a",{href:"https://hub.docker.com/r/hotio/jellyfin"},(0,i.kt)("img",{alt:"Docker Pull Count",src:"https://img.shields.io/docker/pulls/hotio/jellyfin.svg"})),"."),(0,i.kt)("p",null,"Jellyfin distributes ",(0,i.kt)("a",{parentName:"p",href:"https://hub.docker.com/r/jellyfin/jellyfin/"},"official container images on Docker Hub")," for multiple architectures. These images are based on Debian and ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/jellyfin/jellyfin/blob/master/Dockerfile"},"built directly from the Jellyfin source code"),"."),(0,i.kt)("p",null,"Additionally the ",(0,i.kt)("a",{parentName:"p",href:"https://www.linuxserver.io/"},"LinuxServer.io")," project and ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/hotio"},"hotio")," distribute images based on Ubuntu and the official Jellyfin Ubuntu binary packages, see ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/linuxserver/docker-jellyfin/blob/master/Dockerfile"},"here")," and ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/hotio/docker-jellyfin/blob/stable/linux-amd64.Dockerfile"},"here")," to see their Dockerfile."),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"For ARM hardware and RPi, it is recommended to use the LinuxServer.io or hotio image since hardware acceleration support is not yet available on the native image.")),(0,i.kt)("h3",{id:"docker"},"Docker"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://www.docker.com/"},"Docker")," allows you to run containers on Linux, Windows and MacOS."),(0,i.kt)("p",null,"The basic steps to create and run a Jellyfin container using Docker are as follows."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Follow the ",(0,i.kt)("a",{parentName:"p",href:"https://docs.docker.com/engine/install"},"offical installation guide to install Docker"),".")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Download the latest container image."),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"docker pull jellyfin/jellyfin\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Create persistent storage for configuration and cache data."),(0,i.kt)("p",{parentName:"li"},"Either create two persistent volumes:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"docker volume create jellyfin-config\ndocker volume create jellyfin-cache\n")),(0,i.kt)("p",{parentName:"li"},"Or create two directories on the host and use bind mounts:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"mkdir /path/to/config\nmkdir /path/to/cache\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Create and run a container in one of the following ways."))),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"The default network mode for Docker is bridge mode. Bridge mode will be used if host mode is omitted. Use host mode for networking in order to use DLNA or an HDHomeRun.")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Using Docker command line interface:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"docker run -d \\\n --name jellyfin \\\n --user id:gid \\\n --net=host \\\n --volume /path/to/config:/config \\\n --volume /path/to/cache:/cache \\\n --mount type=bind,source=/path/to/media,target=/media \\\n --restart=unless-stopped \\\n jellyfin/jellyfin\n")),(0,i.kt)("p",null,"Using host networking (",(0,i.kt)("inlineCode",{parentName:"p"},"--net=host"),") is optional but required in order to use DLNA or HDHomeRun."),(0,i.kt)("p",null,"Bind Mounts are needed to pass folders from the host OS to the container OS whereas volumes are maintained by Docker and can be considered easier to backup and control by external programs. For a simple setup, it's considered easier to use Bind Mounts instead of volumes. Replace ",(0,i.kt)("inlineCode",{parentName:"p"},"jellyfin-config")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"jellyfin-cache")," with ",(0,i.kt)("inlineCode",{parentName:"p"},"/path/to/config")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"/path/to/cache")," respectively if using bind mounts. Multiple media libraries can be bind mounted if needed:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"--mount type=bind,source=/path/to/media1,target=/media1\n--mount type=bind,source=/path/to/media2,target=/media2,readonly\n...etc\n")),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"There is currently an ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/docker/for-linux/issues/788"},"issue")," with read-only mounts in Docker. If there are submounts within the main mount, the submounts are read-write capable.")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Using Docker Compose:")),(0,i.kt)("p",null,"Create a ",(0,i.kt)("inlineCode",{parentName:"p"},"docker-compose.yml")," file with the following contents:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yml"},'version: "3.5"\nservices:\n  jellyfin:\n    image: jellyfin/jellyfin\n    container_name: jellyfin\n    user: id:gid\n    network_mode: "host"\n    volumes:\n      - /path/to/config:/config\n      - /path/to/cache:/cache\n      - /path/to/media:/media\n      - /path/to/media2:/media2:ro\n    restart: "unless-stopped"\n    # Optional - alternative address used for autodiscovery\n    environment:\n      - JELLYFIN_PublishedServerUrl=http://example.com\n')),(0,i.kt)("p",null,"Then while in the same folder as the ",(0,i.kt)("inlineCode",{parentName:"p"},"docker-compose.yml")," run:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"docker-compose up\n")),(0,i.kt)("p",null,"To run the container in background add ",(0,i.kt)("inlineCode",{parentName:"p"},"-d")," to the above command."),(0,i.kt)("p",null,"You can learn more about using Docker by ",(0,i.kt)("a",{parentName:"p",href:"https://docs.docker.com/"},"reading the official Docker documentation"),"."),(0,i.kt)("h3",{id:"unraid-docker"},"Unraid Docker"),(0,i.kt)("p",null,"An Unraid Docker template is available in the repository."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},'Open the unRaid GUI (at least unRaid 6.5) and click on the "Docker" tab.')),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},'Add the following line under "Template Repositories" and save the options.'),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-data"},"https://github.com/jellyfin/jellyfin/blob/master/deployment/unraid/docker-templates\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},'Click "Add Container" and select "jellyfin".')),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Adjust any required paths and save your changes."))),(0,i.kt)("h3",{id:"kubernetes"},"Kubernetes"),(0,i.kt)("p",null,"A community project to deploy Jellyfin on Kubernetes-based platforms exists ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/home-cluster/jellyfin-openshift"},"at their repository"),". Any issues or feature requests related to deployment on Kubernetes-based platforms should be filed there."),(0,i.kt)("h3",{id:"podman"},"Podman"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://podman.io"},"Podman")," allows you to run containers as non-root. It's also the offically supported container solution on RHEL and CentOS."),(0,i.kt)("p",null,"Steps to run Jellyfin using Podman are almost identical to Docker steps:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Install Podman:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"dnf install -y podman\n")))),(0,i.kt)("p",null,"Installing\npodman volume create jellyfin-cache"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"\nOr create two directories on the host and use bind mounts:\n\n```sh\nmkdir /path/to/config\nmkdir /path/to/cache\n")),(0,i.kt)("ol",{start:4},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Create and run a Jellyfin container:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-sh"},'podman run \\\n --cgroup-manager=systemd \\\n --volume jellyfin-config:/config \\\n --volume jellyfin-cache:/cache \\\n --volume jellyfin-media:/media \\\n -p 8096:8096 \\\n --label "io.containers.autoupdate=image" \\\n --name myjellyfin \\\n jellyfin/jellyfin\n')))),(0,i.kt)("p",null,"Note that Podman doesn't require root access and it's recommended to run the Jellyfin container as a separate non-root user for security."),(0,i.kt)("p",null,"Keep in mind that the ",(0,i.kt)("inlineCode",{parentName:"p"},'--label "io.containers.autoupdate=image"')," flag will allow the container to be automatically updated via ",(0,i.kt)("inlineCode",{parentName:"p"},"podman auto-update"),"."),(0,i.kt)("p",null,"If SELinux is enabled you need to use either the ",(0,i.kt)("inlineCode",{parentName:"p"},"z")," (shared volume) or ",(0,i.kt)("inlineCode",{parentName:"p"},"Z")," (private volume) volume option to allow Jellyfin to access the volumes."),(0,i.kt)("p",null,"Replace ",(0,i.kt)("inlineCode",{parentName:"p"},"jellyfin-config"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"jellyfin-cache"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"jellyfin-media")," with ",(0,i.kt)("inlineCode",{parentName:"p"},"/path/to/config"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"/path/to/cache")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"/path/to/media")," respectively if using bind mounts."),(0,i.kt)("p",null,"To mount your media library read-only append ':ro' to the media volume:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"--volume /path/to/media:/media:ro\n")),(0,i.kt)("h4",{id:"managing-via-systemd"},"Managing via Systemd"),(0,i.kt)("p",null,"To run as a systemd service see ",(0,i.kt)("a",{parentName:"p",href:"https://www.redhat.com/sysadmin/podman-shareable-systemd-services"},"Running containers with Podman and shareable systemd services"),"."),(0,i.kt)("p",null,"As always it is recommended to run the container rootless. Therefore we want to manage the container with the ",(0,i.kt)("inlineCode",{parentName:"p"},"systemd --user")," flag."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"First we have to generate the container as seen above.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Next generate the systemd.service file."),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"podman generate systemd --new --name myjellyfin > ~/.config/systemd/user/container-myjellyfin.service\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Verify and edit the systemd.service file to your liking. To further sandbox see ",(0,i.kt)("a",{parentName:"p",href:"https://www.redhat.com/sysadmin/mastering-systemd"},"Mastering systemd: Securing and sandboxing applications and services"),". An example service file is shown below. ",(0,i.kt)("strong",{parentName:"p"},"Do not blindly copy"),", one should make edits to the service file generated by podman."),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"# container-myjellyfin.service\n# autogenerated by Podman 2.2.1\n# Wed Feb 17 23:49:24 EST 2021\n\n[Unit]\nDescription=Podman container-myjellyfin.service\nDocumentation=man:podman-generate-systemd(1)\nWants=network.target\nAfter=network-online.target\n\n[Service]\nEnvironment=PODMAN_SYSTEMD_UNIT=%n\nRestart=on-failure\nExecStartPre=/bin/rm -f %t/container-myjellyfin.pid %t/container-myjellyfin.ctr-id\nExecStart=/usr/bin/podman run --conmon-pidfile %t/container-myjellyfin.pid --cidfile %t/container-myjellyfin.ctr-id --cgroups=no-conmon -d --replace --cgroup-manager=systemd --volume jellyfin-config:/config:z --volume jellyfin-cache:/cache:z --volume jellyfin-media:/media:z -p 8096:8096 --userns keep-id --name myjellyfin jellyfin/jellyfin\nExecStop=/usr/bin/podman stop --ignore --cidfile %t/container-myjellyfin.ctr-id -t 10\nExecStopPost=/usr/bin/podman rm --ignore -f --cidfile %t/container-myjellyfin.ctr-id\nPIDFile=%t/container-myjellyfin.pid\nKillMode=control-group\nType=forking\n\n# Security Features\nPrivateTmp=yes\nNoNewPrivileges=yes\nProtectSystem=strict\nProtectHome=yes\nProtectKernelTunables=yes\nProtectControlGroups=yes\nPrivateMounts=yes\nProtectHostname=yes\n\n[Install]\nWantedBy=multi-user.target default.target\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Enable the service."),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"systemctl --user enable container-myjellyfin.service\n")),(0,i.kt)("p",{parentName:"li"},"At this point the container will only start when the user logs in and shutdown when they log off. To have the container start as the user at first login we'll have to include one more option."),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"loginctl enable-linger <username>\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Start the service."),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"systemctl --user start container-myjellyfin.service\n")))),(0,i.kt)("h3",{id:"cloudron"},"Cloudron"),(0,i.kt)("p",null,"Cloudron is a complete solution for running apps on your server and keeping them up-to-date and secure. On your Cloudron you can install Jellyfin with a few clicks via the ",(0,i.kt)("a",{parentName:"p",href:"https://cloudron.io/store/org.jellyfin.cloudronapp.html"},"app library")," and updates are delivered automatically."),(0,i.kt)("p",null,"The source code for the package can be found ",(0,i.kt)("a",{parentName:"p",href:"https://git.cloudron.io/cloudron/jellyfin-app"},"here"),".\nAny issues or feature requests related to deployment on Cloudron should be filed there."),(0,i.kt)("h2",{id:"windows-x86x64"},"Windows (x86/x64)"),(0,i.kt)("p",null,"Windows installers and builds in ZIP archive format are available ",(0,i.kt)("a",{parentName:"p",href:"https://jellyfin.org/downloads/#windows"},"here"),"."),(0,i.kt)("admonition",{type:"warning"},(0,i.kt)("p",{parentName:"admonition"},"If you installed a version prior to 10.4.0 using a PowerShell script, you will need to manually remove the service using the command ",(0,i.kt)("inlineCode",{parentName:"p"},"nssm remove Jellyfin")," and uninstall the server by remove all the files manually. Also one might need to move the data files to the correct location, or point the installer at the old location.")),(0,i.kt)("admonition",{type:"warning"},(0,i.kt)("p",{parentName:"admonition"},"The 32-bit or x86 version is not recommended. ",(0,i.kt)("inlineCode",{parentName:"p"},"ffmpeg")," and its video encoders generally perform better as a 64-bit executable due to the extra registers provided. This means that the 32-bit version of Jellyfin is deprecated.")),(0,i.kt)("h3",{id:"install-using-installer-x64"},"Install using Installer (x64)"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Install")),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Download the latest version."),(0,i.kt)("li",{parentName:"ol"},"Run the installer."),(0,i.kt)("li",{parentName:"ol"},"(Optional) When installing as a service, pick the service account type."),(0,i.kt)("li",{parentName:"ol"},"If everything was completed successfully, the Jellyfin service is now running."),(0,i.kt)("li",{parentName:"ol"},"Open your browser at ",(0,i.kt)("a",{parentName:"li",href:"http://localhost:8096"},"http://localhost:8096")," to finish setting up Jellyfin.")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Update")),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Download the latest version."),(0,i.kt)("li",{parentName:"ol"},"Run the installer."),(0,i.kt)("li",{parentName:"ol"},"If everything was completed successfully, the Jellyfin service is now running as the new version.")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Uninstall")),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Go to ",(0,i.kt)("inlineCode",{parentName:"li"},"Add or remove programs")," in Windows."),(0,i.kt)("li",{parentName:"ol"},"Search for Jellyfin."),(0,i.kt)("li",{parentName:"ol"},"Click Uninstall.")),(0,i.kt)("h3",{id:"manual-installation-x86x64"},"Manual Installation (x86/x64)"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Install")),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Download and extract the latest version.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Create a folder ",(0,i.kt)("inlineCode",{parentName:"p"},"jellyfin")," at your preferred install location.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Copy the extracted folder into the ",(0,i.kt)("inlineCode",{parentName:"p"},"jellyfin")," folder and rename it to ",(0,i.kt)("inlineCode",{parentName:"p"},"system"),".")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Create ",(0,i.kt)("inlineCode",{parentName:"p"},"jellyfin.bat")," within your ",(0,i.kt)("inlineCode",{parentName:"p"},"jellyfin")," folder containing:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"To use the default library/data location at ",(0,i.kt)("inlineCode",{parentName:"li"},"%localappdata%"),":")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-cmd"},"<--Your install path--\x3e\\jellyfin\\system\\jellyfin.exe\n")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"To use a custom library/data location (Path after the -d parameter):")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-cmd"},"<--Your install path--\x3e\\jellyfin\\system\\jellyfin.exe -d <--Your install path--\x3e\\jellyfin\\data\n")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"To use a custom library/data location (Path after the -d parameter) and disable the auto-start of the webapp:")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-cmd"},"<--Your install path--\x3e\\jellyfin\\system\\jellyfin.exe -d <--Your install path--\x3e\\jellyfin\\data -noautorunwebapp\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Run"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-cmd"},"jellyfin.bat\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Open your browser at ",(0,i.kt)("inlineCode",{parentName:"p"},"http://<--Server-IP--\x3e:8096")," (if auto-start of webapp is disabled)"))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Update")),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Stop Jellyfin"),(0,i.kt)("li",{parentName:"ol"},"Rename the Jellyfin ",(0,i.kt)("inlineCode",{parentName:"li"},"system")," folder to ",(0,i.kt)("inlineCode",{parentName:"li"},"system-bak")),(0,i.kt)("li",{parentName:"ol"},"Download and extract the latest Jellyfin version"),(0,i.kt)("li",{parentName:"ol"},"Copy the extracted folder into the ",(0,i.kt)("inlineCode",{parentName:"li"},"jellyfin")," folder and rename it to ",(0,i.kt)("inlineCode",{parentName:"li"},"system")),(0,i.kt)("li",{parentName:"ol"},"Run ",(0,i.kt)("inlineCode",{parentName:"li"},"jellyfin.bat")," to start the server again")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Rollback")),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Stop Jellyfin."),(0,i.kt)("li",{parentName:"ol"},"Delete the ",(0,i.kt)("inlineCode",{parentName:"li"},"system")," folder."),(0,i.kt)("li",{parentName:"ol"},"Rename ",(0,i.kt)("inlineCode",{parentName:"li"},"system-bak")," to ",(0,i.kt)("inlineCode",{parentName:"li"},"system"),"."),(0,i.kt)("li",{parentName:"ol"},"Run ",(0,i.kt)("inlineCode",{parentName:"li"},"jellyfin.bat")," to start the server again.")),(0,i.kt)("h2",{id:"macos"},"MacOS"),(0,i.kt)("p",null,"MacOS Application packages and builds in TAR archive format are available ",(0,i.kt)("a",{parentName:"p",href:"https://jellyfin.org/downloads/#macos"},"here"),"."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Install")),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Download the latest version."),(0,i.kt)("li",{parentName:"ol"},"Drag the ",(0,i.kt)("inlineCode",{parentName:"li"},".app")," package into the Applications folder."),(0,i.kt)("li",{parentName:"ol"},"Start the application."),(0,i.kt)("li",{parentName:"ol"},"Open your browser at ",(0,i.kt)("inlineCode",{parentName:"li"},"http://127.0.0.1:8096"),".")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Upgrade")),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Download the latest version."),(0,i.kt)("li",{parentName:"ol"},"Stop the currently running server either via the dashboard or using the application icon."),(0,i.kt)("li",{parentName:"ol"},"Drag the new ",(0,i.kt)("inlineCode",{parentName:"li"},".app")," package into the Applications folder and click yes to replace the files."),(0,i.kt)("li",{parentName:"ol"},"Start the application."),(0,i.kt)("li",{parentName:"ol"},"Open your browser at ",(0,i.kt)("inlineCode",{parentName:"li"},"http://127.0.0.1:8096"),".")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Uninstall")),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Stop the currently running server either via the dashboard or using the application icon."),(0,i.kt)("li",{parentName:"ol"},"Move the ",(0,i.kt)("inlineCode",{parentName:"li"},".app")," package to the trash.")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Deleting Configuation")),(0,i.kt)("p",null,"This will delete all settings and user information. This applies for the .app package and the portable version."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Delete the folder ",(0,i.kt)("inlineCode",{parentName:"li"},"~/.config/jellyfin/")),(0,i.kt)("li",{parentName:"ol"},"Delete the folder ",(0,i.kt)("inlineCode",{parentName:"li"},"~/.local/share/jellyfin/"))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Portable Version")),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Download the latest version"),(0,i.kt)("li",{parentName:"ol"},"Extract it into the Applications folder"),(0,i.kt)("li",{parentName:"ol"},"Open Terminal and type ",(0,i.kt)("inlineCode",{parentName:"li"},"cd")," followed with a space then drag the jellyfin folder into the terminal."),(0,i.kt)("li",{parentName:"ol"},"Type ",(0,i.kt)("inlineCode",{parentName:"li"},"./jellyfin")," to run jellyfin."),(0,i.kt)("li",{parentName:"ol"},"Open your browser at ",(0,i.kt)("a",{parentName:"li",href:"http://localhost:8096"},"http://localhost:8096"))),(0,i.kt)("p",null,"Closing the terminal window will end Jellyfin. Running Jellyfin in screen or tmux can prevent this from happening."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Upgrading the Portable Version")),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Download the latest version."),(0,i.kt)("li",{parentName:"ol"},"Stop the currently running server either via the dashboard or using ",(0,i.kt)("inlineCode",{parentName:"li"},"CTRL+C")," in the terminal window."),(0,i.kt)("li",{parentName:"ol"},"Extract the latest version into Applications"),(0,i.kt)("li",{parentName:"ol"},"Open Terminal and type ",(0,i.kt)("inlineCode",{parentName:"li"},"cd")," followed with a space then drag the jellyfin folder into the terminal."),(0,i.kt)("li",{parentName:"ol"},"Type ",(0,i.kt)("inlineCode",{parentName:"li"},"./jellyfin")," to run jellyfin."),(0,i.kt)("li",{parentName:"ol"},"Open your browser at ",(0,i.kt)("a",{parentName:"li",href:"http://localhost:8096"},"http://localhost:8096"))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Uninstalling the Portable Version")),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Stop the currently running server either via the dashboard or using ",(0,i.kt)("inlineCode",{parentName:"li"},"CTRL+C")," in the terminal window."),(0,i.kt)("li",{parentName:"ol"},"Move ",(0,i.kt)("inlineCode",{parentName:"li"},"/Application/jellyfin-version")," folder to the Trash. Replace version with the actual version number you are trying to delete.")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Using FFmpeg with the Portable Version")),(0,i.kt)("p",null,"The portable version doesn't come with FFmpeg by default, so to install FFmpeg you have three options."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"use the package manager homebrew by typing ",(0,i.kt)("inlineCode",{parentName:"li"},"brew install ffmpeg")," into your Terminal (",(0,i.kt)("a",{parentName:"li",href:"https://treehouse.github.io/installation-guides/mac/homebrew"},"here's how to install homebrew if you don't have it already")),(0,i.kt)("li",{parentName:"ul"},"download the most recent static build from ",(0,i.kt)("a",{parentName:"li",href:"https://evermeet.cx/ffmpeg/get/zip"},"this link")," (compiled by a third party see ",(0,i.kt)("a",{parentName:"li",href:"https://evermeet.cx/ffmpeg/"},"this page")," for options and information), or"),(0,i.kt)("li",{parentName:"ul"},"compile from source available from the official ",(0,i.kt)("a",{parentName:"li",href:"https://ffmpeg.org/download.html"},"website"))),(0,i.kt)("p",null,"More detailed download options, documentation, and signatures can be found."),(0,i.kt)("p",null,"If using static build, extract it to the ",(0,i.kt)("inlineCode",{parentName:"p"},"/Applications/")," folder."),(0,i.kt)("p",null,"Navigate to the Playback tab in the Dashboard and set the path to FFmpeg under FFmpeg Path."),(0,i.kt)("h2",{id:"linux"},"Linux"),(0,i.kt)("h3",{id:"linux-generic-amd64"},"Linux (generic amd64)"),(0,i.kt)("p",null,"Generic amd64 Linux builds in TAR archive format are available ",(0,i.kt)("a",{parentName:"p",href:"https://jellyfin.org/downloads/#linux"},"here"),"."),(0,i.kt)("h4",{id:"installation-process"},"Installation Process"),(0,i.kt)("p",null,"Create a directory in ",(0,i.kt)("inlineCode",{parentName:"p"},"/opt")," for jellyfin and its files, and enter that directory."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"sudo mkdir /opt/jellyfin\ncd /opt/jellyfin\n")),(0,i.kt)("p",null,"Download the latest generic Linux build from the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/jellyfin/jellyfin/releases"},"release page"),'. The generic Linux build ends with "',(0,i.kt)("inlineCode",{parentName:"p"},"linux-amd64.tar.gz"),'". The rest of these instructions assume version 10.4.3 is being installed (i.e. ',(0,i.kt)("inlineCode",{parentName:"p"},"jellyfin_10.4.3_linux-amd64.tar.gz"),"). Download the generic build, then extract the archive:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"sudo wget https://github.com/jellyfin/jellyfin/releases/download/v10.4.3/jellyfin_10.4.3_linux-amd64.tar.gz\nsudo tar xvzf jellyfin_10.4.3_linux-amd64.tar.gz\n")),(0,i.kt)("p",null,"Create a symbolic link to the Jellyfin 10.4.3 directory. This allows an upgrade by repeating the above steps and enabling it by simply re-creating the symbolic link to the new version."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"sudo ln -s jellyfin_10.4.3 jellyfin\n")),(0,i.kt)("p",null,"Create four sub-directories for Jellyfin data."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"sudo mkdir data cache config log\n")),(0,i.kt)("p",null,"If you are running Debian or a derivative, you can also ",(0,i.kt)("a",{parentName:"p",href:"https://repo.jellyfin.org/releases/server/debian/versions/jellyfin-ffmpeg/"},"download")," and install an ffmpeg release built specifically for Jellyfin. Be sure to download the latest release that matches your OS (4.2.1-5 for Debian Stretch assumed below)."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"sudo wget https://repo.jellyfin.org/releases/server/debian/versions/jellyfin-ffmpeg/4.2.1-5/jellyfin-ffmpeg_4.2.1-5-stretch_amd64.deb\nsudo dpkg --install jellyfin-ffmpeg_4.2.1-5-stretch_amd64.deb\n")),(0,i.kt)("p",null,"If you run into any dependency errors, run this and it will install them and jellyfin-ffmpeg."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"sudo apt install -f\n")),(0,i.kt)("p",null,"Due to the number of command line options that must be passed, it is easiest to create a small script to run Jellyfin."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"sudo nano jellyfin.sh\n")),(0,i.kt)("p",null,"Then paste the following commands and modify as needed."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},'#!/bin/bash\nJELLYFINDIR="/opt/jellyfin"\nFFMPEGDIR="/usr/share/jellyfin-ffmpeg"\n\n$JELLYFINDIR/jellyfin/jellyfin \\\n -d $JELLYFINDIR/data \\\n -C $JELLYFINDIR/cache \\\n -c $JELLYFINDIR/config \\\n -l $JELLYFINDIR/log \\\n --ffmpeg $FFMPEGDIR/ffmpeg\n')),(0,i.kt)("p",null,"Assuming you desire Jellyfin to run as a non-root user, ",(0,i.kt)("inlineCode",{parentName:"p"},"chmod")," all files and directories to your normal login user and group. Also make the startup script above executable."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"sudo chown -R user:group *\nsudo chmod u+x jellyfin.sh\n")),(0,i.kt)("p",null,"Finally you can run it. You will see lots of log information when run, this is normal. Setup is as usual in the web browser."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"./jellyfin.sh\n")),(0,i.kt)("h3",{id:"portable-dll"},"Portable DLL"),(0,i.kt)("p",null,"Platform-agnostic .NET Core DLL builds in TAR archive format are available ",(0,i.kt)("a",{parentName:"p",href:"https://jellyfin.org/downloads/#portable"},"here"),". These builds use the binary ",(0,i.kt)("inlineCode",{parentName:"p"},"jellyfin.dll")," and must be loaded with ",(0,i.kt)("inlineCode",{parentName:"p"},"dotnet"),"."),(0,i.kt)("h3",{id:"arch-linux"},"Arch Linux"),(0,i.kt)("p",null,"Jellyfin can be found in the AUR as ",(0,i.kt)("a",{parentName:"p",href:"https://aur.archlinux.org/packages/jellyfin/"},(0,i.kt)("inlineCode",{parentName:"a"},"jellyfin")),", ",(0,i.kt)("a",{parentName:"p",href:"https://aur.archlinux.org/packages/jellyfin-bin/"},(0,i.kt)("inlineCode",{parentName:"a"},"jellyfin-bin"))," and ",(0,i.kt)("a",{parentName:"p",href:"https://aur.archlinux.org/packages/jellyfin-git/"},(0,i.kt)("inlineCode",{parentName:"a"},"jellyfin-git")),"."),(0,i.kt)("h3",{id:"fedora"},"Fedora"),(0,i.kt)("p",null,"Fedora builds in RPM package format are available ",(0,i.kt)("a",{parentName:"p",href:"https://jellyfin.org/downloads/#fedora"},"here")," for now but an official Fedora repository is coming soon."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"You will need to enable rpmfusion as ffmpeg is a dependency of the jellyfin server package"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"sudo dnf install https://mirrors.rpmfusion.org/free/fedora/rpmfusion-free-release-$(rpm -E %fedora).noarch.rpm https://mirrors.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-$(rpm -E %fedora).noarch.rpm\n")))),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"You do not need to manually install ffmpeg, it will be installed by the jellyfin server package as a dependency")),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Install the jellyfin server"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"sudo dnf install (link to version jellyfin server you want to install)\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Install the jellyfin web interface"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"sudo dnf install (link to web RPM you want to install)\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Enable jellyfin service with systemd"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"sudo systemctl start jellyfin\n")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"sudo systemctl enable jellyfin\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Open jellyfin service with firewalld"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"sudo firewall-cmd --permanent --add-service=jellyfin\n")))),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"This will open the following ports\n8096 TCP used by default for HTTP traffic, you can change this in the dashboard\n8920 TCP used by default for HTTPS traffic, you can change this in the dashboard\n1900 UDP used for service auto-discovery, this is not configurable\n7359 UDP used for auto-discovery, this is not configurable")),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Reboot your box"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"sudo systemctl reboot\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Go to localhost:8096 or ip-address-of-jellyfin-server:8096 to finish setup in the web UI"))),(0,i.kt)("h3",{id:"centos"},"CentOS"),(0,i.kt)("p",null,"CentOS/RHEL 7 builds in RPM package format are available ",(0,i.kt)("a",{parentName:"p",href:"https://jellyfin.org/downloads/#centos"},"here")," and an official CentOS/RHEL repository is planned for the future."),(0,i.kt)("p",null,"The default CentOS/RHEL repositories don't carry FFmpeg, which the RPM requires. You will need to add a third-party repository which carries FFmpeg, such as ",(0,i.kt)("a",{parentName:"p",href:"https://rpmfusion.org/Configuration"},"RPM Fusion's Free repository"),"."),(0,i.kt)("p",null,"You can also build ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/jellyfin/jellyfin-ffmpeg"},"Jellyfin's version")," on your own. This includes gathering the dependencies and compiling and installing them. Instructions can be found at ",(0,i.kt)("a",{parentName:"p",href:"https://trac.ffmpeg.org/wiki/CompilationGuide/Centos"},"the FFmpeg wiki"),"."),(0,i.kt)("h3",{id:"debian"},"Debian"),(0,i.kt)("h4",{id:"repository"},"Repository"),(0,i.kt)("p",null,"The Jellyfin team provides a Debian repository for installation on Debian Stretch/Buster. Supported architectures are ",(0,i.kt)("inlineCode",{parentName:"p"},"amd64"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"arm64"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"armhf"),"."),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"Microsoft does not provide a .NET for 32-bit x86 Linux systems, and hence Jellyfin is not supported on the ",(0,i.kt)("inlineCode",{parentName:"p"},"i386")," architecture.")),(0,i.kt)("p",null,"Steps 1 to 3 can also be replaced by:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"sudo apt install extrepo\nsudo extrepo enable jellyfin\n")),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Install HTTPS transport for APT as well as ",(0,i.kt)("inlineCode",{parentName:"p"},"gnupg")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"lsb-release")," if you haven't already."),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"sudo apt install apt-transport-https gnupg lsb-release\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Import the GPG signing key (signed by the Jellyfin Team):"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"wget -O - https://repo.jellyfin.org/debian/jellyfin_team.gpg.key | sudo apt-key add -\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Add a repository configuration at ",(0,i.kt)("inlineCode",{parentName:"p"},"/etc/apt/sources.list.d/jellyfin.list"),":"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-sh"},'echo "deb [arch=$( dpkg --print-architecture )] https://repo.jellyfin.org/debian $( lsb_release -c -s ) main" | sudo tee /etc/apt/sources.list.d/jellyfin.list\n')))),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"Supported releases are ",(0,i.kt)("inlineCode",{parentName:"p"},"stretch"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"buster"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"bullseye"),".")),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Update APT repositories:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"sudo apt update\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Install Jellyfin:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"sudo apt install jellyfin\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Manage the Jellyfin system service with your tool of choice:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"sudo service jellyfin status\nsudo systemctl restart jellyfin\nsudo /etc/init.d/jellyfin stop\n")))),(0,i.kt)("h4",{id:"packages"},"Packages"),(0,i.kt)("p",null,"Raw Debian packages, including old versions, are available ",(0,i.kt)("a",{parentName:"p",href:"https://jellyfin.org/downloads/#debian"},"here"),"."),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"The repository is the preferred way to obtain Jellyfin on Debian, as it contains several dependencies as well.")),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Download the desired ",(0,i.kt)("inlineCode",{parentName:"p"},"jellyfin")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"jellyfin-ffmpeg")," ",(0,i.kt)("inlineCode",{parentName:"p"},".deb")," packages from the repository.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Install the downloaded ",(0,i.kt)("inlineCode",{parentName:"p"},".deb")," packages:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"sudo dpkg -i jellyfin_*.deb jellyfin-ffmpeg_*.deb\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Use ",(0,i.kt)("inlineCode",{parentName:"p"},"apt")," to install any missing dependencies:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"sudo apt -f install\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Manage the Jellyfin system service with your tool of choice:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"sudo service jellyfin status\nsudo systemctl restart jellyfin\nsudo /etc/init.d/jellyfin stop\n")))),(0,i.kt)("h3",{id:"ubuntu"},"Ubuntu"),(0,i.kt)("h4",{id:"migrating-to-the-new-repository"},"Migrating to the new repository"),(0,i.kt)("p",null,"Previous versions of Jellyfin included Ubuntu under the Debian repository. This has now been split out into its own repository to better handle the separate binary packages. If you encounter errors about the ",(0,i.kt)("inlineCode",{parentName:"p"},"ubuntu")," release not being found and you previously configured an ",(0,i.kt)("inlineCode",{parentName:"p"},"ubuntu")," ",(0,i.kt)("inlineCode",{parentName:"p"},"jellyfin.list")," file, please follow these steps."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Remove the old ",(0,i.kt)("inlineCode",{parentName:"p"},"/etc/apt/sources.list.d/jellyfin.list")," file:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"sudo rm /etc/apt/sources.list.d/jellyfin.list\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Proceed with the following section as written."))),(0,i.kt)("h4",{id:"ubuntu-repository"},"Ubuntu Repository"),(0,i.kt)("p",null,"The Jellyfin team provides an Ubuntu repository for installation on Ubuntu Xenial, Bionic, Cosmic, Disco, Eoan, and Focal. Supported architectures are ",(0,i.kt)("inlineCode",{parentName:"p"},"amd64"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"arm64"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"armhf"),". Only ",(0,i.kt)("inlineCode",{parentName:"p"},"amd64")," is supported on Ubuntu Xenial."),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"Microsoft does not provide a .NET for 32-bit x86 Linux systems, and hence Jellyfin is not supported on the ",(0,i.kt)("inlineCode",{parentName:"p"},"i386")," architecture.")),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Install HTTPS transport for APT if you haven't already:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"sudo apt install apt-transport-https\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Enable the Universe repository to obtain all the FFMpeg dependencies:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"sudo add-apt-repository universe\n")))),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"If the above command fails you will need to install the following package ",(0,i.kt)("inlineCode",{parentName:"p"},"software-properties-common"),".\nThis can be achieved with the following command ",(0,i.kt)("inlineCode",{parentName:"p"},"sudo apt-get install software-properties-common"))),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Import the GPG signing key (signed by the Jellyfin Team):"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"wget -O - https://repo.jellyfin.org/ubuntu/jellyfin_team.gpg.key | sudo apt-key add -\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Add a repository configuration at ",(0,i.kt)("inlineCode",{parentName:"p"},"/etc/apt/sources.list.d/jellyfin.list"),":"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-sh"},'echo "deb [arch=$( dpkg --print-architecture )] https://repo.jellyfin.org/ubuntu $( lsb_release -c -s ) main" | sudo tee /etc/apt/sources.list.d/jellyfin.list\n')))),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"Supported releases are ",(0,i.kt)("inlineCode",{parentName:"p"},"xenial"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"bionic"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"cosmic"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"disco"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"eoan"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"focal"),".")),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Update APT repositories:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"sudo apt update\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Install Jellyfin:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"sudo apt install jellyfin\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Manage the Jellyfin system service with your tool of choice:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"sudo service jellyfin status\nsudo systemctl restart jellyfin\nsudo /etc/init.d/jellyfin stop\n")))),(0,i.kt)("h4",{id:"ubuntu-packages"},"Ubuntu Packages"),(0,i.kt)("p",null,"Raw Ubuntu packages, including old versions, are available ",(0,i.kt)("a",{parentName:"p",href:"https://jellyfin.org/downloads/#ubuntu"},"here"),"."),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"The repository is the preferred way to install Jellyfin on Ubuntu, as it contains several dependencies as well.")),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Enable the Universe repository to obtain all the FFMpeg dependencies, and update repositories:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"sudo add-apt-repository universe\nsudo apt update\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Download the desired ",(0,i.kt)("inlineCode",{parentName:"p"},"jellyfin")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"jellyfin-ffmpeg")," ",(0,i.kt)("inlineCode",{parentName:"p"},".deb")," packages from the repository.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Install the required dependencies:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"sudo apt install at libsqlite3-0 libfontconfig1 libfreetype6 libssl1.0.0\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Install the downloaded ",(0,i.kt)("inlineCode",{parentName:"p"},".deb")," packages:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"sudo dpkg -i jellyfin_*.deb jellyfin-ffmpeg_*.deb\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Use ",(0,i.kt)("inlineCode",{parentName:"p"},"apt")," to install any missing dependencies:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"sudo apt -f install\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Manage the Jellyfin system service with your tool of choice:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"sudo service jellyfin status\nsudo systemctl restart jellyfin\nsudo /etc/init.d/jellyfin stop\n")))),(0,i.kt)("h4",{id:"migrating-native-debuntu-install-to-docker"},"Migrating native Debuntu install to docker"),(0,i.kt)("p",null,"It's possible to map your local installation's files to the official docker image."),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"You need to have exactly matching paths for your files inside the docker container! This means that if your media is stored at ",(0,i.kt)("inlineCode",{parentName:"p"},"/media/raid/")," this path needs to be accessible at ",(0,i.kt)("inlineCode",{parentName:"p"},"/media/raid/")," inside the docker container too - the configurations below do include examples.")),(0,i.kt)("p",null,"To guarantee proper permissions, get the ",(0,i.kt)("inlineCode",{parentName:"p"},"uid")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"gid")," of your local jellyfin user and jellyfin group by running the following command:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"   id jellyfin\n")),(0,i.kt)("p",null,"You  need to replace the ",(0,i.kt)("inlineCode",{parentName:"p"},"<uid>:<gid>")," placeholder below with the correct values."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Using docker")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"docker run -d \\\n    --user <uid>:<gid> \\\n    -e JELLYFIN_CACHE_DIR=/var/cache/jellyfin \\\n    -e JELLYFIN_CONFIG_DIR=/etc/jellyfin \\\n    -e JELLYFIN_DATA_DIR=/var/lib/jellyfin \\\n    -e JELLYFIN_LOG_DIR=/var/log/jellyfin \\\n    --volume </path/to/media>:</path/to/media> \\\n    --net=host \\\n    --restart=unless-stopped \\\n    jellyfin/jellyfin\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Using docker-compose")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yml"},'version: "3"\nservices:\n  jellyfin:\n    image: jellyfin/jellyfin\n    user: <uid>:<gid>\n    network_mode: "host"\n    restart: "unless-stopped"\n    environment:\n      - JELLYFIN_CACHE_DIR=/var/cache/jellyfin\n      - JELLYFIN_CONFIG_DIR=/etc/jellyfin\n      - JELLYFIN_DATA_DIR=/var/lib/jellyfin\n      - JELLYFIN_LOG_DIR=/var/log/jellyfin\n    volumes:\n      - /etc/jellyfin:/etc/jellyfin\n      - /var/cache/jellyfin:/var/cache/jellyfin\n      - /var/lib/jellyfin:/var/lib/jellyfin\n      - /var/log/jellyfin:/var/log/jellyfin\n      - <path-to-media>:<path-to-media>\n')),(0,i.kt)("h2",{id:"synology"},"Synology"),(0,i.kt)("p",null,"For ",(0,i.kt)("a",{parentName:"p",href:"https://www.synology.com/en-us/dsm"},"Synology"),", Jellyfin is installed using Docker."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Installing ynology",src:n(5720).Z,width:"2144",height:"1168"})),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Installing Synology",src:n(9602).Z,width:"940",height:"660"})),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Installing Synology",src:n(9052).Z,width:"934",height:"654"})),(0,i.kt)("p",null,"Create the container."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Installing Synology",src:n(2816).Z,width:"1420",height:"1022"})),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Installing Synology",src:n(4567).Z,width:"1318",height:"1142"})),(0,i.kt)("p",null,"Use Advanced Settings to add mount points to your media and config."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Installing Synology",src:n(8091).Z,width:"1330",height:"1124"})),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Installing Synology",src:n(8976).Z,width:"1318",height:"1120"})),(0,i.kt)("p",null,"Host Mode is required for HdHR and DLNA. Use bridge mode if running multiple instances."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Installing Synology",src:n(1373).Z,width:"1318",height:"1116"})),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Installing Synology",src:n(5312).Z,width:"1412",height:"1010"})),(0,i.kt)("p",null,"Browse to ",(0,i.kt)("inlineCode",{parentName:"p"},"http://SERVER_IP:8096")," to access the web client."))}c.isMDXComponent=!0},5720:function(e,t,n){t.Z=n.p+"assets/images/install-synology-1-d51d7b25ecd020b71ce0e6d004bfce48.png"},9602:function(e,t,n){t.Z=n.p+"assets/images/install-synology-2-9cccdc766cd97e28e6a4b31b22259f09.png"},9052:function(e,t,n){t.Z=n.p+"assets/images/install-synology-3-e564518d8c2834b48fe82eaae970135d.png"},2816:function(e,t,n){t.Z=n.p+"assets/images/install-synology-4-7aebcb2b52b97b153caacbb4f29ce6dd.png"},4567:function(e,t,n){t.Z=n.p+"assets/images/install-synology-5-29cdbc1c4a5d723c9088b4a739500258.png"},8091:function(e,t,n){t.Z=n.p+"assets/images/install-synology-6-a4f0f1671b5947a8faf1083f6bbcaace.png"},8976:function(e,t,n){t.Z=n.p+"assets/images/install-synology-7-bb7fb9c0967d61990a6b378f28ea553b.png"},1373:function(e,t,n){t.Z=n.p+"assets/images/install-synology-8-f718033bf51812f75d5c93b031625011.png"},5312:function(e,t,n){t.Z=n.p+"assets/images/install-synology-9-3a44f08dc59fbab1deac8291f6146c0b.png"}}]);