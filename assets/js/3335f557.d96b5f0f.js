(self.webpackChunkjellyfin_org=self.webpackChunkjellyfin_org||[]).push([[2084],{3905:function(e,n,r){"use strict";r.d(n,{Zo:function(){return c},kt:function(){return y}});var t=r(7294);function o(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function a(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function i(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?a(Object(r),!0).forEach((function(n){o(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function s(e,n){if(null==e)return{};var r,t,o=function(e,n){if(null==e)return{};var r,t,o={},a=Object.keys(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||(o[r]=e[r]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=t.createContext({}),d=function(e){var n=t.useContext(l),r=n;return e&&(r="function"==typeof e?e(n):i(i({},n),e)),r},c=function(e){var n=d(e.components);return t.createElement(l.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},h=t.forwardRef((function(e,n){var r=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),h=d(r),y=o,u=h["".concat(l,".").concat(y)]||h[y]||p[y]||a;return r?t.createElement(u,i(i({ref:n},c),{},{components:r})):t.createElement(u,i({ref:n},c))}));function y(e,n){var r=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=h;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var d=2;d<a;d++)i[d]=r[d];return t.createElement.apply(null,i)}return t.createElement.apply(null,r)}h.displayName="MDXCreateElement"},5389:function(e,n,r){"use strict";r.r(n),r.d(n,{frontMatter:function(){return i},contentTitle:function(){return s},metadata:function(){return l},toc:function(){return d},default:function(){return p}});var t=r(2122),o=r(9756),a=(r(7294),r(3905)),i={id:"network-reverse-proxy-nginx",title:"Nginx"},s=void 0,l={unversionedId:"reverse-proxy/network-reverse-proxy-nginx",id:"reverse-proxy/network-reverse-proxy-nginx",isDocsHomePage:!1,title:"Nginx",description:"Nginx",source:"@site/docs/reverse-proxy/nginx.md",sourceDirName:"reverse-proxy",slug:"/reverse-proxy/network-reverse-proxy-nginx",permalink:"/docs/reverse-proxy/network-reverse-proxy-nginx",editUrl:"https://github.com/jellyfin/jellyfin.org/edit/master/docs/reverse-proxy/nginx.md",version:"current",frontMatter:{id:"network-reverse-proxy-nginx",title:"Nginx"},sidebar:"tutorialSidebar",previous:{title:"HAProxy",permalink:"/docs/reverse-proxy/network-reverse-proxy-haproxy"},next:{title:"Traefik v1.x",permalink:"/docs/reverse-proxy/network-reverse-proxy-traefik"}},d=[{value:"Nginx",id:"nginx",children:[]},{value:"Nginx from a subdomain (jellyfin.example.org)",id:"nginx-from-a-subdomain-jellyfinexampleorg",children:[]},{value:"Nginx with Subpath (example.org/jellyfin)",id:"nginx-with-subpath-exampleorgjellyfin",children:[]},{value:"Extra Nginx Configurations",id:"extra-nginx-configurations",children:[{value:"Cache Video Streams",id:"cache-video-streams",children:[]},{value:"Cache Images",id:"cache-images",children:[]},{value:"Rate Limit Downloads",id:"rate-limit-downloads",children:[]}]}],c={toc:d};function p(e){var n=e.components,r=(0,o.Z)(e,["components"]);return(0,a.kt)("wrapper",(0,t.Z)({},c,r,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"nginx"},"Nginx"),(0,a.kt)("p",null,'"',(0,a.kt)("a",{parentName:"p",href:"https://www.nginx.com/"},"Nginx"),' (pronounced "engine X") is a web server which can also be used as a reverse proxy, load balancer, mail proxy and HTTP cache. The software was created by Igor Sysoev and first publicly released in 2004.',"[9]",' A company of the same name was founded in 2011 to provide support and Nginx plus paid software." - ',(0,a.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Nginx"},"Wikipedia")),(0,a.kt)("h2",{id:"nginx-from-a-subdomain-jellyfinexampleorg"},"Nginx from a subdomain (jellyfin.example.org)"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"[!WARNING]","\nHTTP is insecure. The following configuration is provided for ease of use only. If you are planning on exposing your server over the Internet you should setup HTTPS. ",(0,a.kt)("a",{parentName:"p",href:"https://letsencrypt.org/getting-started/"},"Let's Encrypt")," can provide free TLS certificates which can be installed easily via ",(0,a.kt)("a",{parentName:"p",href:"https://certbot.eff.org/"},"certbot"),". Using only HTTP will expose passwords and API keys.")),(0,a.kt)("p",null,"Create the file ",(0,a.kt)("inlineCode",{parentName:"p"},"/etc/nginx/conf.d/jellyfin.conf")," which will forward requests to Jellyfin."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-config"},"# Uncomment the commented sections after you have acquired a SSL Certificate\nserver {\n    listen 80;\n    listen [::]:80;\n    # server_name DOMAIN_NAME;\n\n    # Uncomment to redirect HTTP to HTTPS\n    # return 301 https://$host$request_uri;\n#}\n\n#server {\n    # listen 443 ssl http2;\n    # listen [::]:443 ssl http2;\n    server_name DOMAIN_NAME;\n\n    # use a variable to store the upstream proxy\n    # in this example we are using a hostname which is resolved via DNS\n    # (if you aren't using DNS remove the resolver line and change the variable to point to an IP address e.g `set $jellyfin 127.0.0.1`)\n    set $jellyfin jellyfin;\n    resolver 127.0.0.1 valid=30;\n\n    #ssl_certificate /etc/letsencrypt/live/DOMAIN_NAME/fullchain.pem;\n    #ssl_certificate_key /etc/letsencrypt/live/DOMAIN_NAME/privkey.pem;\n    #include /etc/letsencrypt/options-ssl-nginx.conf;\n    #ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;\n    #add_header Strict-Transport-Security \"max-age=31536000\" always;\n    #ssl_trusted_certificate /etc/letsencrypt/live/DOMAIN_NAME/chain.pem;\n    #ssl_stapling on;\n    #ssl_stapling_verify on;\n\n    # Security / XSS Mitigation Headers\n    add_header X-Frame-Options \"SAMEORIGIN\";\n    add_header X-XSS-Protection \"1; mode=block\";\n    add_header X-Content-Type-Options \"nosniff\";\n\n    # Content Security Policy\n    # See: https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP\n    # Enforces https content and restricts JS/CSS to origin\n    # External Javascript (such as cast_sender.js for Chromecast) must be whitelisted.\n    #add_header Content-Security-Policy \"default-src https: data: blob: http://image.tmdb.org; style-src 'self' 'unsafe-inline'; script-src 'self' 'unsafe-inline' https://www.gstatic.com/cv/js/sender/v1/cast_sender.js https://www.youtube.com blob:; worker-src 'self' blob:; connect-src 'self'; object-src 'none'; frame-ancestors 'self'\";\n\n    location = / {\n        return 302 https://$host/web/;\n    }\n\n    location / {\n        # Proxy main Jellyfin traffic\n        proxy_pass http://$jellyfin:8096;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header X-Forwarded-Protocol $scheme;\n        proxy_set_header X-Forwarded-Host $http_host;\n\n        # Disable buffering when the nginx proxy gets very resource heavy upon streaming\n        proxy_buffering off;\n    }\n\n    # location block for /web - This is purely for aesthetics so /web/#!/ works instead of having to go to /web/index.html/#!/\n    location = /web/ {\n        # Proxy main Jellyfin traffic\n        proxy_pass http://$jellyfin:8096/web/index.html;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header X-Forwarded-Protocol $scheme;\n        proxy_set_header X-Forwarded-Host $http_host;\n    }\n\n    location /socket {\n        # Proxy Jellyfin Websockets traffic\n        proxy_pass http://$jellyfin:8096;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"upgrade\";\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header X-Forwarded-Protocol $scheme;\n        proxy_set_header X-Forwarded-Host $http_host;\n    }\n}\n\n")),(0,a.kt)("h2",{id:"nginx-with-subpath-exampleorgjellyfin"},"Nginx with Subpath (example.org/jellyfin)"),(0,a.kt)("p",null,"When connecting to server from a client application, enter ",(0,a.kt)("inlineCode",{parentName:"p"},"http(s)://DOMAIN_NAME/jellyfin")," in the address field."),(0,a.kt)("p",null,"Set the ",(0,a.kt)("a",{parentName:"p",href:"xref:network-index#base-url"},"base URL")," field in the Jellyfin server.  This can be done by navigating to the Admin Dashboard -> Networking -> Base URL in the web client.  Fill in this box with ",(0,a.kt)("inlineCode",{parentName:"p"},"/jellyfin")," and click Save.  The server will need to be restarted before this change takes effect."),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"[!WARNING]","\nHTTP is insecure. The following configuration is provided for ease of use only. If you are planning on exposing your server over the Internet you should setup HTTPS. ",(0,a.kt)("a",{parentName:"p",href:"https://letsencrypt.org/getting-started/"},"Let's Encrypt")," can provide free TLS certificates which can be installed easily via ",(0,a.kt)("a",{parentName:"p",href:"https://certbot.eff.org/"},"certbot"),".")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-conf"},"# Jellyfin hosted on http(s)://DOMAIN_NAME/jellyfin\n\nserver {\n    listen 80;\n    listen [::]:80;\n\n    server_name DOMAIN_NAME;\n    # You can specify multiple domain names if you want\n    #server_name jellyfin.local;\n\n    # use a variable to store the upstream proxy\n    # in this example we are using a hostname which is resolved via DNS\n    # (if you aren't using DNS remove the resolver line and change the variable to point to an IP address e.g `set $jellyfin 127.0.0.1`)\n    set $jellyfin jellyfin;\n    resolver 127.0.0.1 valid=30;\n\n    # Uncomment and create directory to also host static content\n    #root /srv/http/media;\n    index index.html;\n\n    location / {\n        try_files $uri $uri/ =404;\n    }\n\n    # Jellyfin\n    location /jellyfin {\n        return 302 $scheme://$host/jellyfin/;\n    }\n\n    location /jellyfin/ {\n        # Proxy main Jellyfin traffic\n\n        # The / at the end is significant.\n        # https://www.acunetix.com/blog/articles/a-fresh-look-on-reverse-proxy-related-attacks/\n\n        proxy_pass http://$jellyfin:8096/jellyfin/;\n\n        proxy_pass_request_headers on;\n\n        proxy_set_header Host $host;\n\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header X-Forwarded-Host $http_host;\n\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection $http_connection;\n\n        # Disable buffering when the nginx proxy gets very resource heavy upon streaming\n        proxy_buffering off;\n    }\n}\n")),(0,a.kt)("h2",{id:"extra-nginx-configurations"},"Extra Nginx Configurations"),(0,a.kt)("h3",{id:"cache-video-streams"},"Cache Video Streams"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-conf"},'#Must be in HTTP block\nproxy_cache_path  /home/cache/web levels=1:2 keys_zone=cWEB:50m inactive=90d max_size=35000m;\nmap $request_uri $h264Level { ~(h264-level=)(.+?)& $2; }\nmap $request_uri $h264Profile { ~(h264-profile=)(.+?)& $2; }\n\n#set in Server block\nproxy_cache cWEB;\nproxy_cache_valid 200 301 302 30d;\nproxy_ignore_headers Expires Cache-Control Set-Cookie X-Accel-Expires;\nproxy_cache_use_stale error timeout invalid_header updating http_500 http_502 http_503 http_504;\nproxy_connect_timeout 10s;\nproxy_http_version 1.1;\nproxy_set_header Connection "";\n\nlocation /videos/\n  {\n  proxy_pass http://myJF-IP:8096;\n  proxy_cache_key "mydomain.com$uri?MediaSourceId=$arg_MediaSourceId&VideoCodec=$arg_VideoCodec&AudioCodec=$arg_AudioCodec&AudioStreamIndex=$arg_AudioStreamIndex&VideoBitrate=$arg_VideoBitrate&AudioBitrate=$arg_AudioBitrate&SubtitleMethod=$arg_SubtitleMethod&TranscodingMaxAudioChannels=$arg_TranscodingMaxAudioChannels&RequireAvc=$arg_RequireAvc&SegmentContainer=$arg_SegmentContainer&MinSegments=$arg_MinSegments&BreakOnNonKeyFrames=$arg_BreakOnNonKeyFrames&h264-profile=$h264Profile&h264-level=$h264Level";\n  proxy_cache_valid 200 301 302 30d;\n  }\n')),(0,a.kt)("h3",{id:"cache-images"},"Cache Images"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-conf"},"# Add this outside of you server block (i.e. http block)\nproxy_cache_path /var/cache/nginx/jellyfin levels=1:2 keys_zone=jellyfin:100m max_size=15g inactive=30d use_temp_path=off;\n\n# Cache images (inside server block)\nlocation ~ /Items/(.*)/Images {\n  proxy_pass http://127.0.0.1:8096;\n  proxy_set_header Host $host;\n  proxy_set_header X-Real-IP $remote_addr;\n  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n  proxy_set_header X-Forwarded-Proto $scheme;\n  proxy_set_header X-Forwarded-Protocol $scheme;\n  proxy_set_header X-Forwarded-Host $http_host;\n\n  proxy_cache jellyfin;\n  proxy_cache_revalidate on;\n  proxy_cache_lock on;\n  # add_header X-Cache-Status $upstream_cache_status; # This is only to check if cache is working\n}\n")),(0,a.kt)("p",null,"Ensure that the directory /var/cache/nginx/jellyfin exists and the nginx user has write permissions on it! All the cache options used are explained on ",(0,a.kt)("a",{parentName:"p",href:"https://www.nginx.com/blog/nginx-caching-guide/"},"Nginx blog")," and ",(0,a.kt)("a",{parentName:"p",href:"http://nginx.org/en/docs/http/ngx_http_proxy_module.html"},"Nginx proxy module"),"."),(0,a.kt)("h3",{id:"rate-limit-downloads"},"Rate Limit Downloads"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-conf"},"# Add this outside of you server block (i.e. http block)\nlimit_conn_zone $binary_remote_addr zone=addr:10m;\n\n# Downloads limit (inside server block)\nlocation ~ /Items/(.*)/Download$ {\n   proxy_pass http://127.0.0.1:8096;\n   proxy_set_header Host $host;\n   proxy_set_header X-Real-IP $remote_addr;\n   proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n   proxy_set_header X-Forwarded-Proto $scheme;\n   proxy_set_header X-Forwarded-Protocol $scheme;\n   proxy_set_header X-Forwarded-Host $http_host;\n\n   limit_rate 1700k; # Speed limit (here is on kb/s)\n   limit_conn addr 3; # Number of simultaneous downloads per IP\n   limit_conn_status 460; # Custom error handling\n   # proxy_buffering on; # Be sure buffering is on (it is by default on nginx), otherwise limits won't work\n}\n\n# Error page\nerror_page 460 http://your-page-telling-your-limit/;\n")),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://www.nginx.com/blog/rate-limiting-nginx/"},"See here for more")))}p.isMDXComponent=!0}}]);